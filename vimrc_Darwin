" Pathegen
execute pathogen#infect()

" Mathematica script file support
au! BufRead,BufNewFile *.m set ft=mma sw=2

"" GccSense
"let g:gccsenseUseOmniFunc = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Easymotion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let EasyMotion_leader_key=";"
nmap ;l <Plug>(easymotion-lineforward)
nmap ;j <Plug>(easymotion-j)
nmap ;k <Plug>(easymotion-k)
nmap ;h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1 " US layout

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
"nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" NERDTree options
"autocmd vimenter * NERDTree
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif " close if the only open window

"" Fortran folding
"let fortran_dialect="f90"
let fortran_fold=1
let fortran_fold_conditionals=1
let fortran_fold_multilinecomments=1
"let fortran_more_precise=1

"set modeline
filetype plugin on
filetype indent on
syntax on
set number
set foldmethod=syntax
set history=1989
set autoread
let mapleader=","
let g:mapleader=","

" enable tex syntax folding
let g:tex_fold_enabled=1

" disable conceal feature
let g:tex_conceal = ""

" fast save, quit, save all, quit all
nnoremap <leader>w :w!<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>W :wa!<cr>
nnoremap <leader>Q :qa!<cr>

" run current file in terminal
nnoremap <leader>r :!./%

" source the current file in the terminal
nnoremap <leader>so :!source %<cr><cr>

" fast make
nnoremap <leader>m :!make -j8<cr><cr>

" fast open pdf
nnoremap <leader>l :!open out.pdf<cr><cr>

" fast preview latex with Makefile
nnoremap <leader>ll :!rm -rf log; make>>log; open %<.pdf; make clean<cr><cr>

" fast preview latex without Makefile (dirty, not recommended)
nnoremap <leader>kk :!rm -rf log; latex %; latex %; latex %; dvipdf %<.dvi; open %<.pdf<cr><cr>

" fast way out of insert mode
inoremap jk <esc>

" surround the cursor word with quote and braces
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>[ viw<esc>a]<esc>hbi[<esc>lel
nnoremap <leader>{ viw<esc>a}<esc>hbi{<esc>lel
nnoremap <leader>( viw<esc>a)<esc>hbi(<esc>lel

"set ignorecase
set smartcase
set hlsearch
set incsearch

"highlight current line and column
set cursorline
"set cursorcolumn

syntax enable
colorscheme smyck
"set background=light

set nobackup
set nowb
set noswapfile

" use spaces instead of tabs
set expandtab
" be smart when using tabs
set smarttab
" 1 tab = 4 spaces
set shiftwidth=2
set tabstop=2

" no indentation for switch case

" linebreak on 80 characters
set lbr
set tw=80

" fortran free format
autocmd Filetype fortran set textwidth=132

"" auto detect fortran extension
"let s:extfname = expand("%:e")
"if s:extfname ==? "f90"
"let fortran_free_source=1
"unlet! fortran_fixed_source
"else
"let fortran_fixed_source=1
"unlet! fortran_free_source
"endif

set ai      " auto indent
set si      " smart indent
set wrap    " wrap lines

nnoremap j gj
nnoremap k gk

" Smart way to move between windows
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

nnoremap <leader>ee :vsplit $MYVIMRC<cr>
nnoremap <leader>ss :source $MYVIMRC<cr>
"autocmd! bufwritepost .vimrc source %

" return to last edit position when re-opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" remember info about open buffers on close
set viminfo^=%

set so=10
set wildmenu
set wildignore=*.o,*~,*.pyc
set ruler
set cmdheight=4
set hid
set magic

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ Column:\ %c

" ctags paths
set tags+=/Users/qzmfrank/.vim/tags/tags
set tags+=.
"nnoremap <leader>tl :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ./<cr>
nnoremap <leader>tl :!ctags -R ./<cr><cr>
"nnoremap <leader>tg :!ctags -R

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Neocompelte settings
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


" Tell neosnippet about other snippts
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

